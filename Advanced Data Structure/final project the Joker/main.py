import Projet

#Exercise 1
print("")
print("")
print("    ----    EXERCISE 1    ----    ")
print("")
print("")
Exercice1 = Projet.GothamTransitInformation()

print("Gotham metropolitan transport network created")
print("The network consists of 53 stations numbered from 0 to 52")
print("The network consists of 8 metro lines:")
print("Red, Orange, White, Brown, Yellow, Green, Black, Light Green")
print("")
print("Here is the name of station number 6")
print(Exercice1.stations[6].name)
print("")
print("Here is a description of station number 44")
Exercice1.stations[44].describe()
print("")
print("Here is the weight of the metro section number 0 of the station 0")
print(Exercice1.stations[0].edges[0].weight)
print("This metro section is connecting ",Exercice1.stations[0].name,"to",Exercice1.stations[0].edges[0].destination.name)
print("Via the",Exercice1.stations[0].edges[0].line,"Line")
print("")
print("This is a description of the Red Line")
Exercice1.stations[0].describeLineRecur("Red")
print("")
print("")
print("Minimal Spanning Tree by the Kruskal Algorithm")

Exercice1.KruskalMST() 


#Exercice 2
print("")
print("")
print("    ----    EXERCISE 2    ----    ")
print("")
print("")

print("Here are the minimals distances between G1 and others city ofthe array")

Projet.dijkstra(Projet.Exercice2,0)
Projet.pruneUseless()
print("")
print("We can see that we dont need to send any volunters to the following cities")
print("As they may be deserved by at least one volunter on his way:")
for i in range(0,len(Projet.useless)):
	print("g",Projet.useless[i],end=", ")
print("")
print("So here is the solution of the problem:")
print("With an optimized process, we need to send only ", len(Projet.Exercice2[0])-len(Projet.useless),"volunters")


#Exercice 3
print("")
print("")
print("    ----    EXERCISE 3    ----    ")
print("")
print("")
print("We filled a database with names of 100 Jokers")
print("Lets find out if Antoine is a Joker as he pretend")
print("")
print("Using a greedy BOGO Search:")
Projet.BOGOsearch(Projet.Exercice3,"antoine")
print("")
print("Using a Divide and conquer search on the non-sorted database:")
Projet.divideAndConquerSearch("antoine",Projet.Exercice3,0,len(Projet.Exercice3))
print("")
print("Using a Quick Sort , then searching with a Divide and conquer (Dichotomic) search:")
Projet.dichotomic_search("antoine",Projet.quicksort_recursive(Projet.Exercice3),0,len(Projet.Exercice3))

#Exercice 4
print("")
print("")
print("    ----    EXERCISE 4    ----    ")
print("")
print("")
#Exercice 4.1
root=Projet.node(Projet.Exercice3[0])

for i in range(1,len(Projet.Exercice3)):
	Projet.insert(root,Projet.node(Projet.Exercice3[i]))

print("A BST have been generated by inserting one by one elements of the Exercise 3")
print("We can print this tree by level:")
print("")
Projet.printTreeByLevel(root)
print("")
print("We can also print this tree in pre-order (0),in-order (1) or post-order (2)")
print("Here is post-order:")
print("")
Projet.printTree(root,2)
print("")
print("Size of the tree:",Projet.sizeOfTree(root))
print("")
print("We can also delete an element")
print("Lets delete antoine")
root=Projet.delete(root,"antoine")
print("")
Projet.printTreeByLevel(root)
print("")
print("Size of the tree:",Projet.sizeOfTree(root))

#Exercice 4.2
print("")
print("")
root=Projet.node(Projet.Exercice3[0])

for i in range(1,len(Projet.Exercice3)):
	root=Projet.insertAVL(root,Projet.node(Projet.Exercice3[i]))
print("An AVL-BST have been generated by inserting one by one elements of the Exercise 3")
print("We can print this tree by level:")
print("")
Projet.printTreeByLevel(root)
print("")
print("Size of the tree:",Projet.sizeOfTree(root))
print("")
print("We can also delete an element")
print("The tree remains an AVL tree")
print("Lets delete antoine")
root=Projet.deleteAVL(root,"antoine")
print("")
Projet.printTreeByLevel(root)
print("")
print("Size of the tree:",Projet.sizeOfTree(root))